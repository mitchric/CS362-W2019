        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:#include <math.h>
        -:    9:#include <time.h>
        -:   10:
        -:   11:
        -:   12:  //assert (r == 0);
        -:   13:
        -:   14:  //assert(memcmp(&pre, post, sizeof(struct gameState)) == 0);
        -:   15:
        1:   16:void testNumHandCards() {
        -:   17:
        -:   18:    int i, p, seed, numOfPlayers, numOfCards;
        -:   19:
        1:   20:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   21:                 sea_hag, tribute, smithy};
        -:   22:
        -:   23:    struct gameState G;
        -:   24:
        1:   25:    memset(&G, 23, sizeof(struct gameState));
        -:   26:
        1:   27:    printf ("Testing numHandCards().\n");
        -:   28:
        1:   29:    srand(time(0));
        -:   30:
      101:   31:    for (i = 0; i < 100; i++) {
      100:   32:        seed = rand() % 100 + 1;
      100:   33:        p = rand() % 4 + 1;
      100:   34:        initializeGame(p, k, seed, &G);
      100:   35:        numOfCards = numHandCards(&G); 
      100:   36:        if (numOfCards == 5)
      100:   37:            printf("TEST PASSED, number of cards equals 5\n");
        -:   38:        else 
    #####:   39:            printf("TEST FAILED, number of cards does not equal 5\n");
        -:   40:    }
        1:   41:}
        -:   42:
        -:   43:
        -:   44:
        1:   45:int main (int argc, char *argv[]) {
        -:   46:
        1:   47:    testNumHandCards();
        -:   48:
        1:   49:    exit(0);
        -:   50:}
