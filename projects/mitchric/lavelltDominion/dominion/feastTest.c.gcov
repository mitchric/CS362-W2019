        -:    0:Source:feastTest.c
        -:    0:Graph:feastTest.gcno
        -:    0:Data:feastTest.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include <stdio.h>
        -:    3:#include "rngs.h"
        -:    4:#include <stdlib.h>
        -:    5:#include <string.h>
        -:    6:#include <assert.h>
        -:    7:
        -:    8:#define TESTCARD "feast"
        -:    9:
        1:   10:int main(int argc, char** argv) {
        -:   11:    
        -:   12:    struct gameState G, testG;
        -:   13:
        1:   14:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   15:           sea_hag, tribute, smithy};
        -:   16:
        1:   17:    int numOfPlayers = 2;
        1:   18:    int choice1 = 1, choice2 = 0, choice3 = 0; 
        1:   19:    int handPos = 0, bonus = 0, discarded = 1;
        1:   20:    int currPlayer = 0;
        -:   21:
        -:   22:
        1:   23:    int seed = 1000;
        -:   24:
        1:   25:    initializeGame(numOfPlayers, k, seed, &G);
        -:   26:
        1:   27:    printf("----------------Testing Card: %s-----------------\n", TESTCARD);
        -:   28:
        1:   29:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   30:
        1:   31:    cardEffect(feast, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:   32:
        1:   33:    printf("discard = %d, expected = %d\n", testG.discard[currPlayer][ testG.discardCount[currPlayer] - 1 ], choice1); 
        1:   34:    printf("discard count = %d, expected = %d\n", testG.discardCount[currPlayer], G.discardCount[currPlayer] + discarded);
        1:   35:    printf("Card %d supply count = %d, expected = %d\n", choice1, testG.supplyCount[choice1], G.supplyCount[choice1] - discarded);
        -:   36:    //assert(testG.discard[currPlayer][ testG.discardCount[currPlayer] - 1 ] == choice1);
        -:   37:    //assert(testG.discardCount[currPlayer] == G.discardCount[currPlayer] + discarded);
        -:   38:    //assert(testG.supplyCount[choice1] == G.supplyCount[choice1] - discarded);
        -:   39:    
        1:   40:    return 0;
        -:   41:}
