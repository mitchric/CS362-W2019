        -:    0:Source:treasureMapTest.c
        -:    0:Graph:treasureMapTest.gcno
        -:    0:Data:treasureMapTest.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include <stdio.h>
        -:    3:#include "rngs.h"
        -:    4:#include <stdlib.h>
        -:    5:#include <string.h>
        -:    6:#include <assert.h>
        -:    7:
        -:    8:#define TESTCARD "treasure map"
        -:    9:
        1:   10:int main(int argc, char** argv) {
        -:   11:    
        -:   12:    struct gameState G, testG;
        -:   13:
        1:   14:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   15:           sea_hag, tribute, smithy};
        -:   16:
        1:   17:    int numOfPlayers = 2;
        1:   18:    int choice1 = 0, choice2 = 0, choice3 = 0; 
        1:   19:    int handPos = 0, bonus = 0, card = 1, discarded = 2, newCards = 4;
        1:   20:    int currPlayer = 0;
        -:   21:
        -:   22:
        1:   23:    int seed = 1000;
        -:   24:
        1:   25:    initializeGame(numOfPlayers, k, seed, &G);
        -:   26:
        1:   27:    printf("----------------Testing Card: %s-----------------\n", TESTCARD);
        -:   28:
        1:   29:    memcpy(&testG, &G, sizeof(struct gameState));
        1:   30:    testG.hand[currPlayer][card] = treasure_map;
        1:   31:    cardEffect(treasure_map, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:   32:
        1:   33:    printf("hand count = %d, expected = %d\n", testG.handCount[currPlayer], G.handCount[currPlayer] - discarded); 
        1:   34:    printf("deck count = %d, expected = %d\n", testG.deckCount[currPlayer], G.deckCount[currPlayer] + newCards);
        -:   35:    //assert(testG.handCount[currPlayer] == G.handCount[currPlayer] - discarded);
        -:   36:    //assert(testG.deckCount[currPlayer] == G.deckCount[currPlayer] + newCards);
        -:   37:    
        1:   38:    return 0;
        -:   39:}
