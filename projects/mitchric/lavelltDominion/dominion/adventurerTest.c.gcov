        -:    0:Source:adventurerTest.c
        -:    0:Graph:adventurerTest.gcno
        -:    0:Data:adventurerTest.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include <stdio.h>
        -:    3:#include "rngs.h"
        -:    4:#include <stdlib.h>
        -:    5:#include <string.h>
        -:    6:#include <assert.h>
        -:    7:
        -:    8:#define TESTCARD "adventurer"
        -:    9:
        1:   10:int main(int argc, char** argv) {
        -:   11:    
        -:   12:    struct gameState G, testG;
        -:   13:
        1:   14:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   15:           sea_hag, tribute, smithy};
        -:   16:
        1:   17:    int numOfPlayers = 2;
        1:   18:    int choice1 = 0, choice2 = 0, choice3 = 0; 
        1:   19:    int handPos = 0, bonus = 0, newCards = 2;
        1:   20:    int currPlayer = 0;
        1:   21:    int deckCounter = 0;
        1:   22:    int firstCard = 0;
        1:   23:    int secondCard = 0;
        -:   24:
        -:   25:
        1:   26:    int seed = 1000;
        -:   27:
        1:   28:    initializeGame(numOfPlayers, k, seed, &G);
        -:   29:
        1:   30:    printf("----------------Testing Card: %s-----------------\n", TESTCARD);
        -:   31:
        1:   32:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   33:
        1:   34:    deckCounter = testG.deckCount[currPlayer];
        -:   35:    // set top 2 cards in deck as treasure cards
        1:   36:    testG.deck[currPlayer][deckCounter - 1] = copper; 
        1:   37:    testG.deck[currPlayer][deckCounter - 2] = copper;
        -:   38:
        1:   39:    cardEffect(adventurer, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:   40:
        1:   41:    firstCard = testG.hand[currPlayer][testG.handCount[currPlayer]-1];
        1:   42:    secondCard = testG.hand[currPlayer][testG.handCount[currPlayer] - 2];
        -:   43:
        1:   44:    printf("hand count = %d, expected = %d\n", testG.handCount[currPlayer], G.handCount[currPlayer] + newCards); 
        1:   45:    printf("deck count = %d, expected = %d\n", testG.deckCount[currPlayer], G.deckCount[currPlayer] - newCards);
        1:   46:    printf("First card in hand = %d, expected %d\n", firstCard, copper);
        1:   47:    printf("Second card in hand = %d, expected %d\n", secondCard, copper);
        -:   48:    //assert(testG.handCount[currPlayer] == G.handCount[currPlayer] + newCards);
        -:   49:    //assert(testG.deckCount[currPlayer] == G.deckCount[currPlayer] - newCards);
        -:   50:    //assert(firstCard == copper);
        -:   51:    //assert(secondCard == copper);
        -:   52:    
        1:   53:    return 0;
        -:   54:}
