        -:    0:Source:randomTreasureMapTest.c
        -:    0:Graph:randomTreasureMapTest.gcno
        -:    0:Data:randomTreasureMapTest.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include <stdio.h>
        -:    3:#include "rngs.h"
        -:    4:#include <stdlib.h>
        -:    5:#include <time.h>
        -:    6:#include <math.h>
        -:    7:#include <string.h>
        -:    8:#include <assert.h>
        -:    9:
        -:   10:#define TESTCARD "treasure map"
        -:   11:
     2000:   12:void checkTreasureMap(struct gameState* G) {
        -:   13:
        -:   14:    struct gameState testG;  
        -:   15:
     2000:   16:    int numOfPlayers = 2;
     2000:   17:    int choice1 = 0, choice2 = 0, choice3 = 0; 
     2000:   18:    int handPos = 0, bonus = 0, card = 0, discarded = 2, newCards = 4;
     2000:   19:    int lower = 1, upper = 4;
     2000:   20:    int currPlayer = 0;
        -:   21:    int r;
        -:   22:
     2000:   23:    srand(time(0));
        -:   24:
     2000:   25:    memcpy(&testG, G, sizeof(struct gameState));
        -:   26:
     2000:   27:    card = (rand() % (upper - lower + 1)) + lower; 
        -:   28:    
     2000:   29:    testG.hand[currPlayer][card] = treasure_map;
     2000:   30:    r = cardEffect(treasure_map, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:   31:
        -:   32:    //assert(r == 1);
        -:   33:    //assert(testG.handCount[currPlayer] == G->handCount[currPlayer] - discarded);
        -:   34:    //assert(testG.deckCount[currPlayer] == G->deckCount[currPlayer] + newCards);
        -:   35:
     2000:   36:}
        -:   37:
        1:   38:int main(int argc, char** argv) {
        -:   39:    
        -:   40:    int n, i;
        -:   41:    struct gameState G;
        -:   42:
        1:   43:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   44:           sea_hag, tribute, smithy};
        -:   45:
        1:   46:    int seed = 1000;
        -:   47:
        -:   48:
        1:   49:    printf("----------------Testing Card: %s-----------------\n", TESTCARD);
        -:   50:
        1:   51:    printf ("RANDOM TESTS.\n");
        -:   52:
     2001:   53:    for (n = 0; n < 2000; n++) {
 52602000:   54:        for (i = 0; i < sizeof(struct gameState); i++) {
 52600000:   55:            ((char*)&G)[i] = floor(Random() * 256);
        -:   56:        }
     2000:   57:        initializeGame(2, k, seed, &G);
     2000:   58:        checkTreasureMap(&G);
        -:   59:    }
        -:   60:    
        1:   61:    printf("All tests OK\n");
        -:   62:    
        1:   63:    return 0;
        -:   64:}
