        -:    0:Source:randomSmithyTest.c
        -:    0:Graph:randomSmithyTest.gcno
        -:    0:Data:randomSmithyTest.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include <stdio.h>
        -:    3:#include <math.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:#include <string.h>
        -:    7:#include <assert.h>
        -:    8:
        -:    9:#define TESTCARD "smithy"
        -:   10:
     2000:   11:void checkSmithy(struct gameState* G, int handPos, int currPlayer) {
        -:   12:
     2000:   13:    int choice1 = 0, choice2 = 0, choice3 = 0; 
     2000:   14:    int bonus = 0, newCards = 3, discarded = 1;
        -:   15:    int r;
        -:   16:
        -:   17:    struct gameState testG;
        -:   18:
     2000:   19:    memcpy(&testG, G, sizeof(struct gameState));
        -:   20:    
     2000:   21:    r = cardEffect(smithy, choice1, choice2, choice3, &testG, handPos, &bonus); 
        -:   22:
        -:   23:    //assert(r == 0);
        -:   24:    //assert(testG.handCount[currPlayer] == G->handCount[currPlayer] + newCards - discarded);
        -:   25:    //assert(testG.deckCount[currPlayer] == G->deckCount[currPlayer] - newCards);
        -:   26:    
        -:   27:
     2000:   28:}
        -:   29:
        1:   30:int main(int argc, char** argv) {
        -:   31:    
        -:   32:    int i, n, handPos;
        1:   33:    int currPlayer = 0;
        1:   34:    int seed = 1000;
        -:   35:
        1:   36:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   37:                 sea_hag, tribute, smithy};
        -:   38: 
        -:   39:
        -:   40:    struct gameState G;
        -:   41:
        -:   42:
        1:   43:    printf("----------------Testing Card: %s-----------------\n", TESTCARD);
        -:   44:
        1:   45:    printf ("RANDOM TESTS.\n");
        -:   46:
        1:   47:    SelectStream(2);
        1:   48:    PutSeed(3);
        -:   49:
     2001:   50:    for (n = 0; n < 2000; n++) {
 52602000:   51:        for (i = 0; i < sizeof(struct gameState); i++) {
 52600000:   52:            ((char*)&G)[i] = floor(Random() * 256);
        -:   53:        }
     2000:   54:        initializeGame(2, k, seed, &G);
     2000:   55:        handPos = floor(Random() * 5);
     2000:   56:        checkSmithy(&G, handPos, currPlayer);
        -:   57:    }
        -:   58:
        1:   59:    printf("All tests OK\n");
        -:   60:}
